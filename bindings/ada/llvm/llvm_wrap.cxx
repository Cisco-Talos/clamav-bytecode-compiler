/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#if defined(_WIN32) || defined(__CYGWIN32__)
#  define DllExport   __declspec( dllexport )
#  define SWIGSTDCALL __stdcall
#else
#  define DllExport  
#  define SWIGSTDCALL
#endif 


#ifdef __cplusplus
#  include <new>
#endif




/* Support for throwing Ada exceptions from C/C++ */

typedef enum 
{
  SWIG_AdaException,
  SWIG_AdaOutOfMemoryException,
  SWIG_AdaIndexOutOfRangeException,
  SWIG_AdaDivideByZeroException,
  SWIG_AdaArgumentOutOfRangeException,
  SWIG_AdaNullReferenceException
} SWIG_AdaExceptionCodes;


typedef void (SWIGSTDCALL* SWIG_AdaExceptionCallback_t)(const char *);


typedef struct 
{
  SWIG_AdaExceptionCodes code;
  SWIG_AdaExceptionCallback_t callback;
} 
  SWIG_AdaExceptions_t;


static 
SWIG_AdaExceptions_t 
SWIG_ada_exceptions[] = 
{
  { SWIG_AdaException, NULL },
  { SWIG_AdaOutOfMemoryException, NULL },
  { SWIG_AdaIndexOutOfRangeException, NULL },
  { SWIG_AdaDivideByZeroException, NULL },
  { SWIG_AdaArgumentOutOfRangeException, NULL },
  { SWIG_AdaNullReferenceException, NULL } 
};


static 
void 
SWIG_AdaThrowException (SWIG_AdaExceptionCodes code, const char *msg) 
{
  SWIG_AdaExceptionCallback_t callback = SWIG_ada_exceptions[SWIG_AdaException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_ada_exceptions)/sizeof(SWIG_AdaExceptions_t)) {
    callback = SWIG_ada_exceptions[code].callback;
  }
  callback(msg);
}



#ifdef __cplusplus
extern "C" 
#endif

DllExport void SWIGSTDCALL SWIGRegisterExceptionCallbacks_llvm (SWIG_AdaExceptionCallback_t systemException,
                                                                   SWIG_AdaExceptionCallback_t outOfMemory, 
                                                                   SWIG_AdaExceptionCallback_t indexOutOfRange, 
                                                                   SWIG_AdaExceptionCallback_t divideByZero, 
                                                                   SWIG_AdaExceptionCallback_t argumentOutOfRange,
                                                                   SWIG_AdaExceptionCallback_t nullReference) 
{
  SWIG_ada_exceptions [SWIG_AdaException].callback                   = systemException;
  SWIG_ada_exceptions [SWIG_AdaOutOfMemoryException].callback        = outOfMemory;
  SWIG_ada_exceptions [SWIG_AdaIndexOutOfRangeException].callback    = indexOutOfRange;
  SWIG_ada_exceptions [SWIG_AdaDivideByZeroException].callback       = divideByZero;
  SWIG_ada_exceptions [SWIG_AdaArgumentOutOfRangeException].callback = argumentOutOfRange;
  SWIG_ada_exceptions [SWIG_AdaNullReferenceException].callback      = nullReference;
}


/* Callback for returning strings to Ada without leaking memory */

typedef char * (SWIGSTDCALL* SWIG_AdaStringHelperCallback)(const char *);
static SWIG_AdaStringHelperCallback SWIG_ada_string_callback = NULL;



/* probably obsolete ...
#ifdef __cplusplus
extern "C" 
#endif
DllExport void SWIGSTDCALL SWIGRegisterStringCallback_llvm(SWIG_AdaStringHelperCallback callback) {
  SWIG_ada_string_callback = callback;
}
*/



/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_AdaThrowException(SWIG_AdaArgumentOutOfRangeException, msg); return nullreturn; } else


#define protected public
#define private   public

//#include "llvm-c/Analysis.h"
//#include "llvm-c/BitReader.h"
//#include "llvm-c/BitWriter.h"
#include "llvm-c/Core.h"
//#include "llvm-c/ExecutionEngine.h"
//#include "llvm-c/LinkTimeOptimizer.h"
//#include "llvm-c/lto.h"
//#include "llvm-c/Target.h"



  struct LLVMCtxt;
//  struct LLVMOpaqueType;
//  struct LLVMOpaqueValue;

#undef protected
#undef private
#ifdef __cplusplus 
extern "C" {
#endif
DllExport void SWIGSTDCALL Ada_LLVMDisposeMessage (
  char * jarg1
  )
{
  char *arg1 = (char *) 0 ;
  
  arg1 = jarg1; 
  
  LLVMDisposeMessage(arg1);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMContextCreate (
  )
{
  void * jresult ;
  LLVMContextRef result;
  
  result = (LLVMContextRef)LLVMContextCreate();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetGlobalContext (
  )
{
  void * jresult ;
  LLVMContextRef result;
  
  result = (LLVMContextRef)LLVMGetGlobalContext();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMContextDispose (
  void * jarg1
  )
{
  LLVMContextRef arg1 = (LLVMContextRef) 0 ;
  
  arg1 = (LLVMContextRef)jarg1; 
  
  LLVMContextDispose(arg1);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMModuleCreateWithName (
  char * jarg1
  )
{
  void * jresult ;
  char *arg1 = (char *) 0 ;
  LLVMModuleRef result;
  
  arg1 = jarg1; 
  
  result = (LLVMModuleRef)LLVMModuleCreateWithName((char const *)arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMModuleCreateWithNameInContext (
  char * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  char *arg1 = (char *) 0 ;
  LLVMContextRef arg2 = (LLVMContextRef) 0 ;
  LLVMModuleRef result;
  
  arg1 = jarg1; 
  
  arg2 = (LLVMContextRef)jarg2; 
  
  result = (LLVMModuleRef)LLVMModuleCreateWithNameInContext((char const *)arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMDisposeModule (
  void * jarg1
  )
{
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  LLVMDisposeModule(arg1);
  
  
}



DllExport char * SWIGSTDCALL Ada_LLVMGetDataLayout (
  void * jarg1
  )
{
  char * jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  char *result = 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  result = (char *)LLVMGetDataLayout(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetDataLayout (
  void * jarg1
  ,
  
  char * jarg2
  )
{
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  arg2 = jarg2; 
  
  LLVMSetDataLayout(arg1,(char const *)arg2);
  
  
}



DllExport char * SWIGSTDCALL Ada_LLVMGetTarget (
  void * jarg1
  )
{
  char * jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  char *result = 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  result = (char *)LLVMGetTarget(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetTarget (
  void * jarg1
  ,
  
  char * jarg2
  )
{
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  arg2 = jarg2; 
  
  LLVMSetTarget(arg1,(char const *)arg2);
  
  
}



DllExport int SWIGSTDCALL Ada_LLVMAddTypeName (
  void * jarg1
  ,
  
  char * jarg2
  ,
  
  void * jarg3
  )
{
  int jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  char *arg2 = (char *) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  int result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  arg2 = jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  result = (int)LLVMAddTypeName(arg1,(char const *)arg2,arg3);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMDeleteTypeName (
  void * jarg1
  ,
  
  char * jarg2
  )
{
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  arg2 = jarg2; 
  
  LLVMDeleteTypeName(arg1,(char const *)arg2);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetTypeByName (
  void * jarg1
  ,
  
  char * jarg2
  )
{
  void * jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  char *arg2 = (char *) 0 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  arg2 = jarg2; 
  
  result = (LLVMTypeRef)LLVMGetTypeByName(arg1,(char const *)arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMDumpModule (
  void * jarg1
  )
{
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  LLVMDumpModule(arg1);
  
  
}



DllExport int SWIGSTDCALL Ada_LLVMGetTypeKind (
  void * jarg1
  )
{
  int jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMTypeKind result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (LLVMTypeKind)LLVMGetTypeKind(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMInt1Type (
  )
{
  void * jresult ;
  LLVMTypeRef result;
  
  result = (LLVMTypeRef)LLVMInt1Type();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMInt8Type (
  )
{
  void * jresult ;
  LLVMTypeRef result;
  
  result = (LLVMTypeRef)LLVMInt8Type();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMInt16Type (
  )
{
  void * jresult ;
  LLVMTypeRef result;
  
  result = (LLVMTypeRef)LLVMInt16Type();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMInt32Type (
  )
{
  void * jresult ;
  LLVMTypeRef result;
  
  result = (LLVMTypeRef)LLVMInt32Type();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMInt64Type (
  )
{
  void * jresult ;
  LLVMTypeRef result;
  
  result = (LLVMTypeRef)LLVMInt64Type();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIntType (
  unsigned int jarg1
  )
{
  void * jresult ;
  unsigned int arg1 ;
  LLVMTypeRef result;
  
  
  arg1 = (unsigned int) jarg1; 
  
  
  result = (LLVMTypeRef)LLVMIntType(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport unsigned int SWIGSTDCALL Ada_LLVMGetIntTypeWidth (
  void * jarg1
  )
{
  unsigned int jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (unsigned int)LLVMGetIntTypeWidth(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMFloatType (
  )
{
  void * jresult ;
  LLVMTypeRef result;
  
  result = (LLVMTypeRef)LLVMFloatType();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMDoubleType (
  )
{
  void * jresult ;
  LLVMTypeRef result;
  
  result = (LLVMTypeRef)LLVMDoubleType();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMX86FP80Type (
  )
{
  void * jresult ;
  LLVMTypeRef result;
  
  result = (LLVMTypeRef)LLVMX86FP80Type();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMFP128Type (
  )
{
  void * jresult ;
  LLVMTypeRef result;
  
  result = (LLVMTypeRef)LLVMFP128Type();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMPPCFP128Type (
  )
{
  void * jresult ;
  LLVMTypeRef result;
  
  result = (LLVMTypeRef)LLVMPPCFP128Type();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMFunctionType (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  unsigned int jarg3
  ,
  
  int jarg4
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMTypeRef *arg2 = (LLVMTypeRef *) 0 ;
  unsigned int arg3 ;
  int arg4 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  arg2 = (LLVMTypeRef *)jarg2; 
  
  
  arg3 = (unsigned int) jarg3; 
  
  
  
  arg4 = (int) jarg4; 
  
  
  result = (LLVMTypeRef)LLVMFunctionType(arg1,arg2,arg3,arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_LLVMIsFunctionVarArg (
  void * jarg1
  )
{
  int jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (int)LLVMIsFunctionVarArg(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetReturnType (
  void * jarg1
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (LLVMTypeRef)LLVMGetReturnType(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport unsigned int SWIGSTDCALL Ada_LLVMCountParamTypes (
  void * jarg1
  )
{
  unsigned int jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (unsigned int)LLVMCountParamTypes(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMGetParamTypes (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMTypeRef *arg2 = (LLVMTypeRef *) 0 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  arg2 = (LLVMTypeRef *)jarg2; 
  
  LLVMGetParamTypes(arg1,arg2);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMStructType (
  void * jarg1
  ,
  
  unsigned int jarg2
  ,
  
  int jarg3
  )
{
  void * jresult ;
  LLVMTypeRef *arg1 = (LLVMTypeRef *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef *)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  
  arg3 = (int) jarg3; 
  
  
  result = (LLVMTypeRef)LLVMStructType(arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport unsigned int SWIGSTDCALL Ada_LLVMCountStructElementTypes (
  void * jarg1
  )
{
  unsigned int jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (unsigned int)LLVMCountStructElementTypes(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMGetStructElementTypes (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMTypeRef *arg2 = (LLVMTypeRef *) 0 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  arg2 = (LLVMTypeRef *)jarg2; 
  
  LLVMGetStructElementTypes(arg1,arg2);
  
  
}



DllExport int SWIGSTDCALL Ada_LLVMIsPackedStruct (
  void * jarg1
  )
{
  int jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (int)LLVMIsPackedStruct(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMArrayType (
  void * jarg1
  ,
  
  unsigned int jarg2
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  result = (LLVMTypeRef)LLVMArrayType(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMPointerType (
  void * jarg1
  ,
  
  unsigned int jarg2
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  result = (LLVMTypeRef)LLVMPointerType(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMVectorType (
  void * jarg1
  ,
  
  unsigned int jarg2
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  result = (LLVMTypeRef)LLVMVectorType(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetElementType (
  void * jarg1
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (LLVMTypeRef)LLVMGetElementType(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport unsigned int SWIGSTDCALL Ada_LLVMGetArrayLength (
  void * jarg1
  )
{
  unsigned int jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (unsigned int)LLVMGetArrayLength(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport unsigned int SWIGSTDCALL Ada_LLVMGetPointerAddressSpace (
  void * jarg1
  )
{
  unsigned int jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (unsigned int)LLVMGetPointerAddressSpace(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport unsigned int SWIGSTDCALL Ada_LLVMGetVectorSize (
  void * jarg1
  )
{
  unsigned int jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (unsigned int)LLVMGetVectorSize(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMVoidType (
  )
{
  void * jresult ;
  LLVMTypeRef result;
  
  result = (LLVMTypeRef)LLVMVoidType();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMLabelType (
  )
{
  void * jresult ;
  LLVMTypeRef result;
  
  result = (LLVMTypeRef)LLVMLabelType();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMOpaqueType (
  )
{
  void * jresult ;
  LLVMTypeRef result;
  
  result = (LLVMTypeRef)LLVMOpaqueType();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMCreateTypeHandle (
  void * jarg1
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMTypeHandleRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (LLVMTypeHandleRef)LLVMCreateTypeHandle(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMRefineType (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  LLVMRefineType(arg1,arg2);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMResolveTypeHandle (
  void * jarg1
  )
{
  void * jresult ;
  LLVMTypeHandleRef arg1 = (LLVMTypeHandleRef) 0 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeHandleRef)jarg1; 
  
  result = (LLVMTypeRef)LLVMResolveTypeHandle(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMDisposeTypeHandle (
  void * jarg1
  )
{
  LLVMTypeHandleRef arg1 = (LLVMTypeHandleRef) 0 ;
  
  arg1 = (LLVMTypeHandleRef)jarg1; 
  
  LLVMDisposeTypeHandle(arg1);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMTypeOf (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMTypeRef)LLVMTypeOf(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport char * SWIGSTDCALL Ada_LLVMGetValueName (
  void * jarg1
  )
{
  char * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (char *)LLVMGetValueName(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetValueName (
  void * jarg1
  ,
  
  char * jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = jarg2; 
  
  LLVMSetValueName(arg1,(char const *)arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_LLVMDumpValue (
  void * jarg1
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  LLVMDumpValue(arg1);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAArgument (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAArgument(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsABasicBlock (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsABasicBlock(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAInlineAsm (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAInlineAsm(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAUser (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAUser(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAConstant (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAConstant(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAConstantAggregateZero (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAConstantAggregateZero(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAConstantArray (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAConstantArray(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAConstantExpr (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAConstantExpr(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAConstantFP (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAConstantFP(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAConstantInt (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAConstantInt(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAConstantPointerNull (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAConstantPointerNull(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAConstantStruct (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAConstantStruct(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAConstantVector (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAConstantVector(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAGlobalValue (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAGlobalValue(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAFunction (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAFunction(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAGlobalAlias (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAGlobalAlias(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAGlobalVariable (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAGlobalVariable(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAUndefValue (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAUndefValue(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAInstruction (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAInstruction(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsABinaryOperator (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsABinaryOperator(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsACallInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsACallInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAIntrinsicInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAIntrinsicInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsADbgInfoIntrinsic (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsADbgInfoIntrinsic(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsADbgDeclareInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsADbgDeclareInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsADbgFuncStartInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsADbgFuncStartInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsADbgRegionEndInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsADbgRegionEndInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsADbgRegionStartInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsADbgRegionStartInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsADbgStopPointInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsADbgStopPointInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAEHSelectorInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAEHSelectorInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAMemIntrinsic (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAMemIntrinsic(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAMemCpyInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAMemCpyInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAMemMoveInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAMemMoveInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAMemSetInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAMemSetInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsACmpInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsACmpInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAFCmpInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAFCmpInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAICmpInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAICmpInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAExtractElementInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAExtractElementInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAGetElementPtrInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAGetElementPtrInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAInsertElementInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAInsertElementInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAInsertValueInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAInsertValueInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAPHINode (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAPHINode(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsASelectInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsASelectInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAShuffleVectorInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAShuffleVectorInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAStoreInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAStoreInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsATerminatorInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsATerminatorInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsABranchInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsABranchInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAInvokeInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAInvokeInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAReturnInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAReturnInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsASwitchInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsASwitchInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAUnreachableInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAUnreachableInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAUnwindInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAUnwindInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAUnaryInstruction (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAUnaryInstruction(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAAllocationInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAAllocationInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAAllocaInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAAllocaInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAMallocInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAMallocInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsACastInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsACastInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsABitCastInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsABitCastInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAFPExtInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAFPExtInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAFPToSIInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAFPToSIInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAFPToUIInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAFPToUIInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAFPTruncInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAFPTruncInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAIntToPtrInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAIntToPtrInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAPtrToIntInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAPtrToIntInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsASExtInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsASExtInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsASIToFPInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsASIToFPInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsATruncInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsATruncInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAUIToFPInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAUIToFPInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAZExtInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAZExtInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAExtractValueInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAExtractValueInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAFreeInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAFreeInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsALoadInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsALoadInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMIsAVAArgInst (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMIsAVAArgInst(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstNull (
  void * jarg1
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (LLVMValueRef)LLVMConstNull(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstAllOnes (
  void * jarg1
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (LLVMValueRef)LLVMConstAllOnes(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetUndef (
  void * jarg1
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetUndef(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_LLVMIsConstant (
  void * jarg1
  )
{
  int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (int)LLVMIsConstant(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_LLVMIsNull (
  void * jarg1
  )
{
  int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (int)LLVMIsNull(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_LLVMIsUndef (
  void * jarg1
  )
{
  int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (int)LLVMIsUndef(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstPointerNull (
  void * jarg1
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (LLVMValueRef)LLVMConstPointerNull(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstInt (
  void * jarg1
  ,
  
  unsigned long long jarg2
  ,
  
  int jarg3
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  unsigned long long arg2 ;
  int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  
  arg2 = (unsigned long long) jarg2; 
  
  
  
  arg3 = (int) jarg3; 
  
  
  result = (LLVMValueRef)LLVMConstInt(arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstReal (
  void * jarg1
  ,
  
  double jarg2
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  double arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  
  arg2 = (double) jarg2; 
  
  
  result = (LLVMValueRef)LLVMConstReal(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstRealOfString (
  void * jarg1
  ,
  
  char * jarg2
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  arg2 = jarg2; 
  
  result = (LLVMValueRef)LLVMConstRealOfString(arg1,(char const *)arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstString (
  char * jarg1
  ,
  
  unsigned int jarg2
  ,
  
  int jarg3
  )
{
  void * jresult ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  LLVMValueRef result;
  
  arg1 = jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  
  arg3 = (int) jarg3; 
  
  
  result = (LLVMValueRef)LLVMConstString((char const *)arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstArray (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  unsigned int jarg3
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  arg2 = (LLVMValueRef *)jarg2; 
  
  
  arg3 = (unsigned int) jarg3; 
  
  
  result = (LLVMValueRef)LLVMConstArray(arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstStruct (
  void * jarg1
  ,
  
  unsigned int jarg2
  ,
  
  int jarg3
  )
{
  void * jresult ;
  LLVMValueRef *arg1 = (LLVMValueRef *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef *)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  
  arg3 = (int) jarg3; 
  
  
  result = (LLVMValueRef)LLVMConstStruct(arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstVector (
  void * jarg1
  ,
  
  unsigned int jarg2
  )
{
  void * jresult ;
  LLVMValueRef *arg1 = (LLVMValueRef *) 0 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef *)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  result = (LLVMValueRef)LLVMConstVector(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMSizeOf (
  void * jarg1
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  result = (LLVMValueRef)LLVMSizeOf(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstNeg (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMConstNeg(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstNot (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMConstNot(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstAdd (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstAdd(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstSub (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstSub(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstMul (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstMul(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstUDiv (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstUDiv(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstSDiv (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstSDiv(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstFDiv (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstFDiv(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstURem (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstURem(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstSRem (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstSRem(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstFRem (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstFRem(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstAnd (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstAnd(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstOr (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstOr(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstXor (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstXor(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstICmp (
  int jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  )
{
  void * jresult ;
  LLVMIntPredicate arg1 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMIntPredicate) jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  result = (LLVMValueRef)LLVMConstICmp(arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstFCmp (
  int jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  )
{
  void * jresult ;
  LLVMRealPredicate arg1 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMRealPredicate) jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  result = (LLVMValueRef)LLVMConstFCmp(arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstShl (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstShl(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstLShr (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstLShr(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstAShr (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstAShr(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstGEP (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  unsigned int jarg3
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef *)jarg2; 
  
  
  arg3 = (unsigned int) jarg3; 
  
  
  result = (LLVMValueRef)LLVMConstGEP(arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstTrunc (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstTrunc(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstSExt (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstSExt(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstZExt (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstZExt(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstFPTrunc (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstFPTrunc(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstFPExt (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstFPExt(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstUIToFP (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstUIToFP(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstSIToFP (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstSIToFP(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstFPToUI (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstFPToUI(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstFPToSI (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstFPToSI(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstPtrToInt (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstPtrToInt(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstIntToPtr (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstIntToPtr(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstBitCast (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstBitCast(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstSelect (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  result = (LLVMValueRef)LLVMConstSelect(arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstExtractElement (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMConstExtractElement(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstInsertElement (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  result = (LLVMValueRef)LLVMConstInsertElement(arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstShuffleVector (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  result = (LLVMValueRef)LLVMConstShuffleVector(arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstExtractValue (
  void * jarg1
  ,
  
  unsigned int* jarg2
  ,
  
  unsigned int jarg3
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (unsigned int *) jarg2;
  
  
  
  arg3 = (unsigned int) jarg3; 
  
  
  result = (LLVMValueRef)LLVMConstExtractValue(arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstInsertValue (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  unsigned int* jarg3
  ,
  
  unsigned int jarg4
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  
  arg3 = (unsigned int *) jarg3;
  
  
  
  arg4 = (unsigned int) jarg4; 
  
  
  result = (LLVMValueRef)LLVMConstInsertValue(arg1,arg2,arg3,arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMConstInlineAsm (
  void * jarg1
  ,
  
  char * jarg2
  ,
  
  char * jarg3
  ,
  
  int jarg4
  )
{
  void * jresult ;
  LLVMTypeRef arg1 = (LLVMTypeRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  
  arg2 = jarg2; 
  
  arg3 = jarg3; 
  
  
  arg4 = (int) jarg4; 
  
  
  result = (LLVMValueRef)LLVMConstInlineAsm(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetGlobalParent (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMModuleRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMModuleRef)LLVMGetGlobalParent(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_LLVMIsDeclaration (
  void * jarg1
  )
{
  int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (int)LLVMIsDeclaration(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_LLVMGetLinkage (
  void * jarg1
  )
{
  int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMLinkage result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMLinkage)LLVMGetLinkage(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetLinkage (
  void * jarg1
  ,
  
  int jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMLinkage arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMLinkage) jarg2; 
  
  LLVMSetLinkage(arg1,arg2);
  
  
}



DllExport char * SWIGSTDCALL Ada_LLVMGetSection (
  void * jarg1
  )
{
  char * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (char *)LLVMGetSection(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetSection (
  void * jarg1
  ,
  
  char * jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = jarg2; 
  
  LLVMSetSection(arg1,(char const *)arg2);
  
  
}



DllExport int SWIGSTDCALL Ada_LLVMGetVisibility (
  void * jarg1
  )
{
  int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMVisibility result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMVisibility)LLVMGetVisibility(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetVisibility (
  void * jarg1
  ,
  
  int jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMVisibility arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMVisibility) jarg2; 
  
  LLVMSetVisibility(arg1,arg2);
  
  
}



DllExport unsigned int SWIGSTDCALL Ada_LLVMGetAlignment (
  void * jarg1
  )
{
  unsigned int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (unsigned int)LLVMGetAlignment(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetAlignment (
  void * jarg1
  ,
  
  unsigned int jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  LLVMSetAlignment(arg1,arg2);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMAddGlobal (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  char * jarg3
  )
{
  void * jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  arg3 = jarg3; 
  
  result = (LLVMValueRef)LLVMAddGlobal(arg1,arg2,(char const *)arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetNamedGlobal (
  void * jarg1
  ,
  
  char * jarg2
  )
{
  void * jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  arg2 = jarg2; 
  
  result = (LLVMValueRef)LLVMGetNamedGlobal(arg1,(char const *)arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetFirstGlobal (
  void * jarg1
  )
{
  void * jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetFirstGlobal(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetLastGlobal (
  void * jarg1
  )
{
  void * jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetLastGlobal(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetNextGlobal (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetNextGlobal(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetPreviousGlobal (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetPreviousGlobal(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMDeleteGlobal (
  void * jarg1
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  LLVMDeleteGlobal(arg1);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetInitializer (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetInitializer(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetInitializer (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  LLVMSetInitializer(arg1,arg2);
  
  
}



DllExport int SWIGSTDCALL Ada_LLVMIsThreadLocal (
  void * jarg1
  )
{
  int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (int)LLVMIsThreadLocal(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetThreadLocal (
  void * jarg1
  ,
  
  int jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (int) jarg2; 
  
  
  LLVMSetThreadLocal(arg1,arg2);
  
  
}



DllExport int SWIGSTDCALL Ada_LLVMIsGlobalConstant (
  void * jarg1
  )
{
  int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (int)LLVMIsGlobalConstant(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetGlobalConstant (
  void * jarg1
  ,
  
  int jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (int) jarg2; 
  
  
  LLVMSetGlobalConstant(arg1,arg2);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMAddAlias (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMAddAlias(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMAddFunction (
  void * jarg1
  ,
  
  char * jarg2
  ,
  
  void * jarg3
  )
{
  void * jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  char *arg2 = (char *) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  arg2 = jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  result = (LLVMValueRef)LLVMAddFunction(arg1,(char const *)arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetNamedFunction (
  void * jarg1
  ,
  
  char * jarg2
  )
{
  void * jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  arg2 = jarg2; 
  
  result = (LLVMValueRef)LLVMGetNamedFunction(arg1,(char const *)arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetFirstFunction (
  void * jarg1
  )
{
  void * jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetFirstFunction(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetLastFunction (
  void * jarg1
  )
{
  void * jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetLastFunction(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetNextFunction (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetNextFunction(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetPreviousFunction (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetPreviousFunction(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMDeleteFunction (
  void * jarg1
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  LLVMDeleteFunction(arg1);
  
  
}



DllExport unsigned int SWIGSTDCALL Ada_LLVMGetIntrinsicID (
  void * jarg1
  )
{
  unsigned int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (unsigned int)LLVMGetIntrinsicID(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport unsigned int SWIGSTDCALL Ada_LLVMGetFunctionCallConv (
  void * jarg1
  )
{
  unsigned int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (unsigned int)LLVMGetFunctionCallConv(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetFunctionCallConv (
  void * jarg1
  ,
  
  unsigned int jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  LLVMSetFunctionCallConv(arg1,arg2);
  
  
}



DllExport char * SWIGSTDCALL Ada_LLVMGetGC (
  void * jarg1
  )
{
  char * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (char *)LLVMGetGC(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetGC (
  void * jarg1
  ,
  
  char * jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = jarg2; 
  
  LLVMSetGC(arg1,(char const *)arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_LLVMAddFunctionAttr (
  void * jarg1
  ,
  
  int jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMAttribute arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMAttribute) jarg2; 
  
  LLVMAddFunctionAttr(arg1,arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_LLVMRemoveFunctionAttr (
  void * jarg1
  ,
  
  int jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMAttribute arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMAttribute) jarg2; 
  
  LLVMRemoveFunctionAttr(arg1,arg2);
  
  
}



DllExport unsigned int SWIGSTDCALL Ada_LLVMCountParams (
  void * jarg1
  )
{
  unsigned int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (unsigned int)LLVMCountParams(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMGetParams (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef *)jarg2; 
  
  LLVMGetParams(arg1,arg2);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetParam (
  void * jarg1
  ,
  
  unsigned int jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  result = (LLVMValueRef)LLVMGetParam(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetParamParent (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetParamParent(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetFirstParam (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetFirstParam(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetLastParam (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetLastParam(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetNextParam (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetNextParam(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetPreviousParam (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetPreviousParam(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMAddAttribute (
  void * jarg1
  ,
  
  int jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMAttribute arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMAttribute) jarg2; 
  
  LLVMAddAttribute(arg1,arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_LLVMRemoveAttribute (
  void * jarg1
  ,
  
  int jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMAttribute arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMAttribute) jarg2; 
  
  LLVMRemoveAttribute(arg1,arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetParamAlignment (
  void * jarg1
  ,
  
  unsigned int jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  LLVMSetParamAlignment(arg1,arg2);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBasicBlockAsValue (
  void * jarg1
  )
{
  void * jresult ;
  LLVMBasicBlockRef arg1 = (LLVMBasicBlockRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  
  result = (LLVMValueRef)LLVMBasicBlockAsValue(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_LLVMValueIsBasicBlock (
  void * jarg1
  )
{
  int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (int)LLVMValueIsBasicBlock(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMValueAsBasicBlock (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMBasicBlockRef)LLVMValueAsBasicBlock(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetBasicBlockParent (
  void * jarg1
  )
{
  void * jresult ;
  LLVMBasicBlockRef arg1 = (LLVMBasicBlockRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetBasicBlockParent(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport unsigned int SWIGSTDCALL Ada_LLVMCountBasicBlocks (
  void * jarg1
  )
{
  unsigned int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (unsigned int)LLVMCountBasicBlocks(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMGetBasicBlocks (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMBasicBlockRef *arg2 = (LLVMBasicBlockRef *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMBasicBlockRef *)jarg2; 
  
  LLVMGetBasicBlocks(arg1,arg2);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetFirstBasicBlock (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMBasicBlockRef)LLVMGetFirstBasicBlock(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetLastBasicBlock (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMBasicBlockRef)LLVMGetLastBasicBlock(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetNextBasicBlock (
  void * jarg1
  )
{
  void * jresult ;
  LLVMBasicBlockRef arg1 = (LLVMBasicBlockRef) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  
  result = (LLVMBasicBlockRef)LLVMGetNextBasicBlock(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetPreviousBasicBlock (
  void * jarg1
  )
{
  void * jresult ;
  LLVMBasicBlockRef arg1 = (LLVMBasicBlockRef) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  
  result = (LLVMBasicBlockRef)LLVMGetPreviousBasicBlock(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetEntryBasicBlock (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMBasicBlockRef)LLVMGetEntryBasicBlock(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMAppendBasicBlock (
  void * jarg1
  ,
  
  char * jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  char *arg2 = (char *) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = jarg2; 
  
  result = (LLVMBasicBlockRef)LLVMAppendBasicBlock(arg1,(char const *)arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMInsertBasicBlock (
  void * jarg1
  ,
  
  char * jarg2
  )
{
  void * jresult ;
  LLVMBasicBlockRef arg1 = (LLVMBasicBlockRef) 0 ;
  char *arg2 = (char *) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  
  arg2 = jarg2; 
  
  result = (LLVMBasicBlockRef)LLVMInsertBasicBlock(arg1,(char const *)arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMDeleteBasicBlock (
  void * jarg1
  )
{
  LLVMBasicBlockRef arg1 = (LLVMBasicBlockRef) 0 ;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  
  LLVMDeleteBasicBlock(arg1);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetInstructionParent (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMBasicBlockRef)LLVMGetInstructionParent(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetFirstInstruction (
  void * jarg1
  )
{
  void * jresult ;
  LLVMBasicBlockRef arg1 = (LLVMBasicBlockRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetFirstInstruction(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetLastInstruction (
  void * jarg1
  )
{
  void * jresult ;
  LLVMBasicBlockRef arg1 = (LLVMBasicBlockRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetLastInstruction(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetNextInstruction (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetNextInstruction(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetPreviousInstruction (
  void * jarg1
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (LLVMValueRef)LLVMGetPreviousInstruction(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetInstructionCallConv (
  void * jarg1
  ,
  
  unsigned int jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  LLVMSetInstructionCallConv(arg1,arg2);
  
  
}



DllExport unsigned int SWIGSTDCALL Ada_LLVMGetInstructionCallConv (
  void * jarg1
  )
{
  unsigned int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (unsigned int)LLVMGetInstructionCallConv(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMAddInstrAttribute (
  void * jarg1
  ,
  
  unsigned int jarg2
  ,
  
  int jarg3
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int arg2 ;
  LLVMAttribute arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  arg3 = (LLVMAttribute) jarg3; 
  
  LLVMAddInstrAttribute(arg1,arg2,arg3);
  
  
}



DllExport void SWIGSTDCALL Ada_LLVMRemoveInstrAttribute (
  void * jarg1
  ,
  
  unsigned int jarg2
  ,
  
  int jarg3
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int arg2 ;
  LLVMAttribute arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  arg3 = (LLVMAttribute) jarg3; 
  
  LLVMRemoveInstrAttribute(arg1,arg2,arg3);
  
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetInstrParamAlignment (
  void * jarg1
  ,
  
  unsigned int jarg2
  ,
  
  unsigned int jarg3
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  
  arg3 = (unsigned int) jarg3; 
  
  
  LLVMSetInstrParamAlignment(arg1,arg2,arg3);
  
  
}



DllExport int SWIGSTDCALL Ada_LLVMIsTailCall (
  void * jarg1
  )
{
  int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (int)LLVMIsTailCall(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMSetTailCall (
  void * jarg1
  ,
  
  int jarg2
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (int) jarg2; 
  
  
  LLVMSetTailCall(arg1,arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_LLVMAddIncoming (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  unsigned int jarg4
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  LLVMBasicBlockRef *arg3 = (LLVMBasicBlockRef *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef *)jarg2; 
  
  arg3 = (LLVMBasicBlockRef *)jarg3; 
  
  
  arg4 = (unsigned int) jarg4; 
  
  
  LLVMAddIncoming(arg1,arg2,arg3,arg4);
  
  
}



DllExport unsigned int SWIGSTDCALL Ada_LLVMCountIncoming (
  void * jarg1
  )
{
  unsigned int jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  result = (unsigned int)LLVMCountIncoming(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetIncomingValue (
  void * jarg1
  ,
  
  unsigned int jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  result = (LLVMValueRef)LLVMGetIncomingValue(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetIncomingBlock (
  void * jarg1
  ,
  
  unsigned int jarg2
  )
{
  void * jresult ;
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  unsigned int arg2 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  
  arg2 = (unsigned int) jarg2; 
  
  
  result = (LLVMBasicBlockRef)LLVMGetIncomingBlock(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMCreateBuilder (
  )
{
  void * jresult ;
  LLVMBuilderRef result;
  
  result = (LLVMBuilderRef)LLVMCreateBuilder();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMPositionBuilder (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  )
{
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMBasicBlockRef arg2 = (LLVMBasicBlockRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMBasicBlockRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  LLVMPositionBuilder(arg1,arg2,arg3);
  
  
}



DllExport void SWIGSTDCALL Ada_LLVMPositionBuilderBefore (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  LLVMPositionBuilderBefore(arg1,arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_LLVMPositionBuilderAtEnd (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMBasicBlockRef arg2 = (LLVMBasicBlockRef) 0 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMBasicBlockRef)jarg2; 
  
  LLVMPositionBuilderAtEnd(arg1,arg2);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMGetInsertBlock (
  void * jarg1
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  result = (LLVMBasicBlockRef)LLVMGetInsertBlock(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMClearInsertionPosition (
  void * jarg1
  )
{
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  LLVMClearInsertionPosition(arg1);
  
  
}



DllExport void SWIGSTDCALL Ada_LLVMInsertIntoBuilder (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  LLVMInsertIntoBuilder(arg1,arg2);
  
  
}



DllExport void SWIGSTDCALL Ada_LLVMDisposeBuilder (
  void * jarg1
  )
{
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  LLVMDisposeBuilder(arg1);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildRetVoid (
  void * jarg1
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  result = (LLVMValueRef)LLVMBuildRetVoid(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildRet (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMBuildRet(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildBr (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMBasicBlockRef arg2 = (LLVMBasicBlockRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMBasicBlockRef)jarg2; 
  
  result = (LLVMValueRef)LLVMBuildBr(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildCondBr (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  void * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMBasicBlockRef arg3 = (LLVMBasicBlockRef) 0 ;
  LLVMBasicBlockRef arg4 = (LLVMBasicBlockRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMBasicBlockRef)jarg3; 
  
  arg4 = (LLVMBasicBlockRef)jarg4; 
  
  result = (LLVMValueRef)LLVMBuildCondBr(arg1,arg2,arg3,arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildSwitch (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  unsigned int jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMBasicBlockRef arg3 = (LLVMBasicBlockRef) 0 ;
  unsigned int arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMBasicBlockRef)jarg3; 
  
  
  arg4 = (unsigned int) jarg4; 
  
  
  result = (LLVMValueRef)LLVMBuildSwitch(arg1,arg2,arg3,arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildInvoke (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  unsigned int jarg4
  ,
  
  void * jarg5
  ,
  
  void * jarg6
  ,
  
  char * jarg7
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  unsigned int arg4 ;
  LLVMBasicBlockRef arg5 = (LLVMBasicBlockRef) 0 ;
  LLVMBasicBlockRef arg6 = (LLVMBasicBlockRef) 0 ;
  char *arg7 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef *)jarg3; 
  
  
  arg4 = (unsigned int) jarg4; 
  
  
  arg5 = (LLVMBasicBlockRef)jarg5; 
  
  arg6 = (LLVMBasicBlockRef)jarg6; 
  
  arg7 = jarg7; 
  
  result = (LLVMValueRef)LLVMBuildInvoke(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildUnwind (
  void * jarg1
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  result = (LLVMValueRef)LLVMBuildUnwind(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildUnreachable (
  void * jarg1
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  result = (LLVMValueRef)LLVMBuildUnreachable(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMAddCase (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  )
{
  LLVMValueRef arg1 = (LLVMValueRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMBasicBlockRef arg3 = (LLVMBasicBlockRef) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMBasicBlockRef)jarg3; 
  
  LLVMAddCase(arg1,arg2,arg3);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildAdd (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildAdd(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildSub (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildSub(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildMul (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildMul(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildUDiv (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildUDiv(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildSDiv (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildSDiv(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildFDiv (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildFDiv(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildURem (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildURem(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildSRem (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildSRem(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildFRem (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildFRem(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildShl (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildShl(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildLShr (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildLShr(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildAShr (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildAShr(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildAnd (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildAnd(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildOr (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildOr(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildXor (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildXor(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildNeg (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  char * jarg3
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = jarg3; 
  
  result = (LLVMValueRef)LLVMBuildNeg(arg1,arg2,(char const *)arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildNot (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  char * jarg3
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = jarg3; 
  
  result = (LLVMValueRef)LLVMBuildNot(arg1,arg2,(char const *)arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildMalloc (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  char * jarg3
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  arg3 = jarg3; 
  
  result = (LLVMValueRef)LLVMBuildMalloc(arg1,arg2,(char const *)arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildArrayMalloc (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildArrayMalloc(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildAlloca (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  char * jarg3
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  arg3 = jarg3; 
  
  result = (LLVMValueRef)LLVMBuildAlloca(arg1,arg2,(char const *)arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildArrayAlloca (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildArrayAlloca(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildFree (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (LLVMValueRef)LLVMBuildFree(arg1,arg2);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildLoad (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  char * jarg3
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = jarg3; 
  
  result = (LLVMValueRef)LLVMBuildLoad(arg1,arg2,(char const *)arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildStore (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  result = (LLVMValueRef)LLVMBuildStore(arg1,arg2,arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildGEP (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  unsigned int jarg4
  ,
  
  char * jarg5
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef *)jarg3; 
  
  
  arg4 = (unsigned int) jarg4; 
  
  
  arg5 = jarg5; 
  
  result = (LLVMValueRef)LLVMBuildGEP(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildTrunc (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildTrunc(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildZExt (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildZExt(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildSExt (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildSExt(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildFPToUI (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildFPToUI(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildFPToSI (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildFPToSI(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildUIToFP (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildUIToFP(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildSIToFP (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildSIToFP(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildFPTrunc (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildFPTrunc(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildFPExt (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildFPExt(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildPtrToInt (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildPtrToInt(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildIntToPtr (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildIntToPtr(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildBitCast (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildBitCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildICmp (
  void * jarg1
  ,
  
  int jarg2
  ,
  
  void * jarg3
  ,
  
  void * jarg4
  ,
  
  char * jarg5
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMIntPredicate arg2 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  LLVMValueRef arg4 = (LLVMValueRef) 0 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMIntPredicate) jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = (LLVMValueRef)jarg4; 
  
  arg5 = jarg5; 
  
  result = (LLVMValueRef)LLVMBuildICmp(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildFCmp (
  void * jarg1
  ,
  
  int jarg2
  ,
  
  void * jarg3
  ,
  
  void * jarg4
  ,
  
  char * jarg5
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMRealPredicate arg2 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  LLVMValueRef arg4 = (LLVMValueRef) 0 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMRealPredicate) jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = (LLVMValueRef)jarg4; 
  
  arg5 = jarg5; 
  
  result = (LLVMValueRef)LLVMBuildFCmp(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildPhi (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  char * jarg3
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMTypeRef arg2 = (LLVMTypeRef) 0 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMTypeRef)jarg2; 
  
  arg3 = jarg3; 
  
  result = (LLVMValueRef)LLVMBuildPhi(arg1,arg2,(char const *)arg3);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildCall (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  unsigned int jarg4
  ,
  
  char * jarg5
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef *)jarg3; 
  
  
  arg4 = (unsigned int) jarg4; 
  
  
  arg5 = jarg5; 
  
  result = (LLVMValueRef)LLVMBuildCall(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildSelect (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  void * jarg4
  ,
  
  char * jarg5
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  LLVMValueRef arg4 = (LLVMValueRef) 0 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = (LLVMValueRef)jarg4; 
  
  arg5 = jarg5; 
  
  result = (LLVMValueRef)LLVMBuildSelect(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildVAArg (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMTypeRef arg3 = (LLVMTypeRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMTypeRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildVAArg(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildExtractElement (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildExtractElement(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildInsertElement (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  void * jarg4
  ,
  
  char * jarg5
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  LLVMValueRef arg4 = (LLVMValueRef) 0 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = (LLVMValueRef)jarg4; 
  
  arg5 = jarg5; 
  
  result = (LLVMValueRef)LLVMBuildInsertElement(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildShuffleVector (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  void * jarg4
  ,
  
  char * jarg5
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  LLVMValueRef arg4 = (LLVMValueRef) 0 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  arg4 = (LLVMValueRef)jarg4; 
  
  arg5 = jarg5; 
  
  result = (LLVMValueRef)LLVMBuildShuffleVector(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildExtractValue (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  unsigned int jarg3
  ,
  
  char * jarg4
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  
  arg3 = (unsigned int) jarg3; 
  
  
  arg4 = jarg4; 
  
  result = (LLVMValueRef)LLVMBuildExtractValue(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMBuildInsertValue (
  void * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  ,
  
  unsigned int jarg4
  ,
  
  char * jarg5
  )
{
  void * jresult ;
  LLVMBuilderRef arg1 = (LLVMBuilderRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  LLVMValueRef arg3 = (LLVMValueRef) 0 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  arg3 = (LLVMValueRef)jarg3; 
  
  
  arg4 = (unsigned int) jarg4; 
  
  
  arg5 = jarg5; 
  
  result = (LLVMValueRef)LLVMBuildInsertValue(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMCreateModuleProviderForExistingModule (
  void * jarg1
  )
{
  void * jresult ;
  LLVMModuleRef arg1 = (LLVMModuleRef) 0 ;
  LLVMModuleProviderRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  
  result = (LLVMModuleProviderRef)LLVMCreateModuleProviderForExistingModule(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMDisposeModuleProvider (
  void * jarg1
  )
{
  LLVMModuleProviderRef arg1 = (LLVMModuleProviderRef) 0 ;
  
  arg1 = (LLVMModuleProviderRef)jarg1; 
  
  LLVMDisposeModuleProvider(arg1);
  
  
}



DllExport int SWIGSTDCALL Ada_LLVMCreateMemoryBufferWithContentsOfFile (
  char * jarg1
  ,
  
  void * jarg2
  ,
  
  void * jarg3
  )
{
  int jresult ;
  char *arg1 = (char *) 0 ;
  LLVMMemoryBufferRef *arg2 = (LLVMMemoryBufferRef *) 0 ;
  char **arg3 = (char **) 0 ;
  int result;
  
  arg1 = jarg1; 
  
  arg2 = (LLVMMemoryBufferRef *)jarg2; 
  
  arg3 = (char **)jarg3; 
  
  result = (int)LLVMCreateMemoryBufferWithContentsOfFile((char const *)arg1,arg2,arg3);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_LLVMCreateMemoryBufferWithSTDIN (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  int jresult ;
  LLVMMemoryBufferRef *arg1 = (LLVMMemoryBufferRef *) 0 ;
  char **arg2 = (char **) 0 ;
  int result;
  
  arg1 = (LLVMMemoryBufferRef *)jarg1; 
  
  arg2 = (char **)jarg2; 
  
  result = (int)LLVMCreateMemoryBufferWithSTDIN(arg1,arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMDisposeMemoryBuffer (
  void * jarg1
  )
{
  LLVMMemoryBufferRef arg1 = (LLVMMemoryBufferRef) 0 ;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  
  LLVMDisposeMemoryBuffer(arg1);
  
  
}



DllExport void * SWIGSTDCALL Ada_LLVMCreatePassManager (
  )
{
  void * jresult ;
  LLVMPassManagerRef result;
  
  result = (LLVMPassManagerRef)LLVMCreatePassManager();
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport void * SWIGSTDCALL Ada_LLVMCreateFunctionPassManager (
  void * jarg1
  )
{
  void * jresult ;
  LLVMModuleProviderRef arg1 = (LLVMModuleProviderRef) 0 ;
  LLVMPassManagerRef result;
  
  arg1 = (LLVMModuleProviderRef)jarg1; 
  
  result = (LLVMPassManagerRef)LLVMCreateFunctionPassManager(arg1);
  jresult = (void *) result;      
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_LLVMRunPassManager (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  int jresult ;
  LLVMPassManagerRef arg1 = (LLVMPassManagerRef) 0 ;
  LLVMModuleRef arg2 = (LLVMModuleRef) 0 ;
  int result;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  
  arg2 = (LLVMModuleRef)jarg2; 
  
  result = (int)LLVMRunPassManager(arg1,arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_LLVMInitializeFunctionPassManager (
  void * jarg1
  )
{
  int jresult ;
  LLVMPassManagerRef arg1 = (LLVMPassManagerRef) 0 ;
  int result;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  
  result = (int)LLVMInitializeFunctionPassManager(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_LLVMRunFunctionPassManager (
  void * jarg1
  ,
  
  void * jarg2
  )
{
  int jresult ;
  LLVMPassManagerRef arg1 = (LLVMPassManagerRef) 0 ;
  LLVMValueRef arg2 = (LLVMValueRef) 0 ;
  int result;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  
  arg2 = (LLVMValueRef)jarg2; 
  
  result = (int)LLVMRunFunctionPassManager(arg1,arg2);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport int SWIGSTDCALL Ada_LLVMFinalizeFunctionPassManager (
  void * jarg1
  )
{
  int jresult ;
  LLVMPassManagerRef arg1 = (LLVMPassManagerRef) 0 ;
  int result;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  
  result = (int)LLVMFinalizeFunctionPassManager(arg1);
  jresult = result; 
  
  
  
  return jresult;
  
}



DllExport void SWIGSTDCALL Ada_LLVMDisposePassManager (
  void * jarg1
  )
{
  LLVMPassManagerRef arg1 = (LLVMPassManagerRef) 0 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  
  LLVMDisposePassManager(arg1);
  
  
}



#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif

