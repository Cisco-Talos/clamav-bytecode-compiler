//===- Base.td - LLVMC toolchain descriptions --------------*- tablegen -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file contains compilation graph description used by llvmc.
//
//===----------------------------------------------------------------------===//

include "llvm/CompilerDriver/Common.td"

// Options

def OptList : OptionList<[
 (switch_option "emit-llvm",
    (help "Emit LLVM .ll files instead of native object files")),
 (switch_option "E",
    (help "Stop after the preprocessing stage, do not run the compiler")),
 (switch_option "fsyntax-only",
    (help "Stop after checking the input for syntax errors")),
 (switch_option "opt",
    (help "Enable opt")),
 (switch_option "O0",
    (help "Turn off optimization")),
 (switch_option "O1",
    (help "Optimization level 1")),
 (switch_option "O2",
    (help "Optimization level 2")),
 (switch_option "O3",
    (help "Optimization level 3")),
 (switch_option "S",
    (help "Stop after compilation, do not assemble")),
 (switch_option "c",
    (help "Compile and assemble, but do not link")),
 (switch_option "pthread",
    (help "Enable threads")),
 (switch_option "m32",
    (help "Generate code for a 32-bit environment"), (hidden)),
 (switch_option "m64",
    (help "Generate code for a 64-bit environment"), (hidden)),
 (switch_option "fPIC",
    (help "Relocation model: PIC"), (hidden)),
 (switch_option "mdynamic-no-pic",
    (help "Relocation model: dynamic-no-pic"), (hidden)),
 (parameter_option "linker",
    (help "Choose linker (possible values: gcc, g++)")),
 (parameter_option "mtune",
    (help "Target a specific CPU type"), (hidden)),

 // TODO: Add a conditional compilation mechanism to make Darwin-only options
 // like '-arch' really Darwin-only.

 (parameter_option "arch",
    (help "Compile for the specified target architecture"), (hidden)),
 (parameter_option "march",
    (help "A synonym for -mtune"), (hidden)),
 (parameter_option "mcpu",
    (help "A deprecated synonym for -mtune"), (hidden)),
 (switch_option "mfix-and-continue",
    (help "Needed by gdb to load .o files dynamically"), (hidden)),
 (parameter_option "MF",
    (help "Specify a file to write dependencies to"), (hidden)),
 (parameter_list_option "MT",
    (help "Change the name of the rule emitted by dependency generation"),
    (hidden)),
 (parameter_list_option "include",
    (help "Include the named file prior to preprocessing")),
 (parameter_list_option "iquote",
    (help "Search dir only for files requested with #inlcude \"file\""),
    (hidden)),
 (parameter_list_option "framework",
    (help "Specifies a framework to link against")),
 (parameter_list_option "weak_framework",
    (help "Specifies a framework to weakly link against"), (hidden)),
 (parameter_option "filelist", (hidden),
    (help "Link the files listed in file")),
 (prefix_list_option "F",
    (help "Add a directory to framework search path")),
 (prefix_list_option "I",
    (help "Add a directory to include path")),
 (prefix_list_option "D",
    (help "Define a macro")),
 (prefix_list_option "Wa,", (comma_separated),
    (help "Pass options to assembler")),
 (prefix_list_option "Wllc,", (comma_separated),
    (help "Pass options to llc")),
 (prefix_list_option "L",
    (help "Add a directory to link path")),
 (prefix_list_option "l",
    (help "Search a library when linking")),
 (prefix_list_option "Wl,",
    (help "Pass options to linker")),
 (prefix_list_option "Wo,", (comma_separated),
    (help "Pass options to opt")),
 (prefix_list_option "m",
     (help "Enable or disable various extensions (-mmmx, -msse, etc.)"),
     (hidden)),
 (switch_option "dynamiclib", (hidden),
     (help "Produce a dynamic library")),
 (switch_option "prebind", (hidden),
     (help "Prebind all undefined symbols")),
 (switch_option "dead_strip", (hidden),
     (help "Remove unreachable blocks of code")),
 (switch_option "single_module", (hidden),
     (help "Build the library so it contains only one module")),
 (parameter_option "install_name", (hidden),
     (help "File name the library will be installed in")),
 (parameter_option "compatibility_version", (hidden),
     (help "Compatibility version number")),
 (parameter_option "current_version", (hidden),
     (help "Current version number"))
]>;

// Option preprocessor.

def Preprocess : OptionPreprocessor<
(case (not (any_switch_on ["O0", "O1", "O2", "O3"])),
           (set_option "O2"),
      (and (switch_on "O3"), (any_switch_on ["O0", "O1", "O2"])),
           (unset_option ["O0", "O1", "O2"]),
      (and (switch_on "O2"), (any_switch_on ["O0", "O1"])),
           (unset_option ["O0", "O1"]),
      (switch_on ["O1", "O0"]),
           (unset_option "O0"))
>;

// Tools

class llvm_gcc_based <string cmd_prefix, string in_lang, string E_ext> : Tool<
[(in_language in_lang),
 (out_language "llvm-bitcode"),
 (output_suffix "bc"),
 (cmd_line (case
            (switch_on "E"),
              (case (not_empty "o"),
                    !strconcat(cmd_prefix, " -E $INFILE -o $OUTFILE"),
                    (default),
                    !strconcat(cmd_prefix, " -E $INFILE")),
            (switch_on "fsyntax-only"),
              !strconcat(cmd_prefix, " -fsyntax-only $INFILE"),
            (and (switch_on "S"), (switch_on "emit-llvm")),
              !strconcat(cmd_prefix, " -S $INFILE -o $OUTFILE -emit-llvm"),
            (default),
              !strconcat(cmd_prefix, " -c $INFILE -o $OUTFILE -emit-llvm"))),
 (actions
     (case
         (and (multiple_input_files), (or (switch_on "S"), (switch_on "c"))),
              (error "cannot specify -o with -c or -S with multiple files"),
         (switch_on "E"), [(stop_compilation), (output_suffix E_ext)],
         (switch_on ["emit-llvm", "S"]),
              [(output_suffix "ll"), (stop_compilation)],
         (switch_on ["emit-llvm", "c"]), (stop_compilation),
         (switch_on "fsyntax-only"), (stop_compilation),
         (not_empty "include"), (forward "include"),
         (not_empty "iquote"), (forward "iquote"),
         (not_empty "save-temps"), (append_cmd "-save-temps"),
         (not_empty "I"), (forward "I"),
         (not_empty "F"), (forward "F"),
         (not_empty "D"), (forward "D"),
         (not_empty "arch"), (forward "arch"),
         (not_empty "march"), (forward "march"),
         (not_empty "mtune"), (forward "mtune"),
         (not_empty "mcpu"), (forward "mcpu"),
         (not_empty "m"), (forward "m"),
         (switch_on "mfix-and-continue"), (forward "mfix-and-continue"),
         (switch_on "m32"), (forward "m32"),
         (switch_on "m64"), (forward "m64"),
         (switch_on "O0"), (forward "O0"),
         (switch_on "O1"), (forward "O1"),
         (switch_on "O2"), (forward "O2"),
         (switch_on "O3"), (forward "O3"),
         (switch_on "fPIC"), (forward "fPIC"),
         (switch_on "mdynamic-no-pic"), (forward "mdynamic-no-pic"),
         (not_empty "MF"), (forward "MF"),
         (not_empty "MT"), (forward "MT"))),
 (sink)
]>;

def llvm_gcc_c : llvm_gcc_based<"@LLVMGCCCOMMAND@ -x c", "c", "i">;
def llvm_gcc_cpp : llvm_gcc_based<"@LLVMGXXCOMMAND@ -x c++", "c++", "i">;
def llvm_gcc_m : llvm_gcc_based<"@LLVMGCCCOMMAND@ -x objective-c",
                                                  "objective-c", "mi">;
def llvm_gcc_mxx : llvm_gcc_based<"@LLVMGCCCOMMAND@ -x objective-c++",
                                  "objective-c++", "mi">;

def opt : Tool<
[(in_language "llvm-bitcode"),
 (out_language "llvm-bitcode"),
 (output_suffix "bc"),
 (actions (case (not_empty "Wo,"), (forward_value "Wo,"),
                (switch_on "O1"), (forward "O1"),
                (switch_on "O2"), (forward "O2"),
                (switch_on "O3"), (forward "O3"))),
 (cmd_line "opt -f $INFILE -o $OUTFILE")
]>;

def llvm_as : Tool<
[(in_language "llvm-assembler"),
 (out_language "llvm-bitcode"),
 (output_suffix "bc"),
 (cmd_line "llvm-as $INFILE -o $OUTFILE"),
 (actions (case (switch_on "emit-llvm"), (stop_compilation)))
]>;

def llvm_gcc_assembler : Tool<
[(in_language "assembler"),
 (out_language "object-code"),
 (output_suffix "o"),
 (cmd_line "@LLVMGCCCOMMAND@ -c -x assembler $INFILE -o $OUTFILE"),
 (actions (case
          (switch_on "c"), (stop_compilation),
          (not_empty "arch"), (forward "arch"),
          (not_empty "Wa,"), (forward_value "Wa,")))
]>;

def llc : Tool<
[(in_language ["llvm-bitcode", "llvm-assembler"]),
 (out_language "assembler"),
 (output_suffix "s"),
 (cmd_line "llc -f $INFILE -o $OUTFILE"),
 (actions (case
          (switch_on "S"), (stop_compilation),
          (switch_on "O0"), (forward "O0"),
          (switch_on "O1"), (forward "O1"),
          (switch_on "O2"), (forward "O2"),
          (switch_on "O3"), (forward "O3"),
          (switch_on "fPIC"), (append_cmd "-relocation-model=pic"),
          (switch_on "mdynamic-no-pic"),
                     (append_cmd "-relocation-model=dynamic-no-pic"),
          (not_empty "march"), (forward "mcpu"),
          (not_empty "mtune"), (forward "mcpu"),
          (not_empty "mcpu"), (forward "mcpu"),
          (not_empty "m"), (forward_transformed_value "m", "ConvertToMAttr"),
          (not_empty "Wllc,"), (forward_value "Wllc,")))
]>;

// Base class for linkers
class llvm_gcc_based_linker <string cmd_prefix> : Tool<
[(in_language "object-code"),
 (out_language "executable"),
 (output_suffix "out"),
 (cmd_line !strconcat(cmd_prefix, " $INFILE -o $OUTFILE")),
 (works_on_empty (case (not_empty "filelist"), true,
                       (default), false)),
 (join),
 (actions (case
          (switch_on "pthread"), (append_cmd "-lpthread"),
          (not_empty "L"), (forward "L"),
          (not_empty "F"), (forward "F"),
          (not_empty "arch"), (forward "arch"),
          (not_empty "framework"), (forward "framework"),
          (not_empty "weak_framework"), (forward "weak_framework"),
          (not_empty "filelist"), (forward "filelist"),
          (switch_on "m32"), (forward "m32"),
          (switch_on "m64"), (forward "m64"),
          (not_empty "l"), (forward "l"),
          (not_empty "Wl,"), (forward "Wl,"),
          (switch_on "dynamiclib"), (forward "dynamiclib"),
          (switch_on "prebind"), (forward "prebind"),
          (switch_on "dead_strip"), (forward "dead_strip"),
          (switch_on "single_module"), (forward "single_module"),
          (not_empty "compatibility_version"),
                     (forward "compatibility_version"),
          (not_empty "current_version"), (forward "current_version"),
          (not_empty "install_name"), (forward "install_name")))
]>;

// Default linker
def llvm_gcc_linker : llvm_gcc_based_linker<"@LLVMGCCCOMMAND@">;
// Alternative linker for C++
def llvm_gcc_cpp_linker : llvm_gcc_based_linker<"@LLVMGXXCOMMAND@">;

// Language map

def LanguageMap : LanguageMap<
    [LangToSuffixes<"c++", ["cc", "cp", "cxx", "cpp", "CPP", "c++", "C"]>,
     LangToSuffixes<"c", ["c"]>,
     LangToSuffixes<"c-cpp-output", ["i"]>,
     LangToSuffixes<"objective-c-cpp-output", ["mi"]>,
     LangToSuffixes<"objective-c++", ["mm"]>,
     LangToSuffixes<"objective-c", ["m"]>,
     LangToSuffixes<"assembler", ["s"]>,
     LangToSuffixes<"assembler-with-cpp", ["S"]>,
     LangToSuffixes<"llvm-assembler", ["ll"]>,
     LangToSuffixes<"llvm-bitcode", ["bc"]>,
     LangToSuffixes<"object-code", ["o"]>,
     LangToSuffixes<"executable", ["out"]>
     ]>;

// Compilation graph

def CompilationGraph : CompilationGraph<[
    Edge<"root", "llvm_gcc_c">,
    Edge<"root", "llvm_gcc_assembler">,
    Edge<"root", "llvm_gcc_cpp">,
    Edge<"root", "llvm_gcc_m">,
    Edge<"root", "llvm_gcc_mxx">,
    Edge<"root", "llc">,

    Edge<"llvm_gcc_c", "llc">,
    Edge<"llvm_gcc_cpp", "llc">,
    Edge<"llvm_gcc_m", "llc">,
    Edge<"llvm_gcc_mxx", "llc">,
    Edge<"llvm_as", "llc">,

    OptionalEdge<"root", "llvm_as",
                         (case (switch_on "emit-llvm"), (inc_weight))>,
    OptionalEdge<"llvm_gcc_c", "opt", (case (switch_on "opt"), (inc_weight))>,
    OptionalEdge<"llvm_gcc_cpp", "opt", (case (switch_on "opt"), (inc_weight))>,
    OptionalEdge<"llvm_gcc_m", "opt", (case (switch_on "opt"), (inc_weight))>,
    OptionalEdge<"llvm_gcc_mxx", "opt", (case (switch_on "opt"), (inc_weight))>,
    OptionalEdge<"llvm_as", "opt", (case (switch_on "opt"), (inc_weight))>,
    Edge<"opt", "llc">,

    Edge<"llc", "llvm_gcc_assembler">,
    Edge<"llvm_gcc_assembler", "llvm_gcc_linker">,
    OptionalEdge<"llvm_gcc_assembler", "llvm_gcc_cpp_linker",
                 (case
                     (or (input_languages_contain "c++"),
                         (input_languages_contain "objective-c++")),
                     (inc_weight),
                     (or (parameter_equals "linker", "g++"),
                         (parameter_equals "linker", "c++")), (inc_weight))>,


    Edge<"root", "llvm_gcc_linker">,
    OptionalEdge<"root", "llvm_gcc_cpp_linker",
                 (case
                     (or (input_languages_contain "c++"),
                         (input_languages_contain "objective-c++")),
                     (inc_weight),
                     (or (parameter_equals "linker", "g++"),
                         (parameter_equals "linker", "c++")), (inc_weight))>
    ]>;
